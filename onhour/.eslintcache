[{"C:\\sizl_onhour\\onhour\\src\\App.js":"1","C:\\sizl_onhour\\onhour\\src\\index.js":"2","C:\\sizl_onhour\\onhour\\src\\components\\Navigation.js":"3","C:\\sizl_onhour\\onhour\\src\\routers\\authorization\\Login.js":"4","C:\\sizl_onhour\\onhour\\src\\routers\\authorization\\Landing.js":"5","C:\\sizl_onhour\\onhour\\src\\routers\\authorization\\Register.js":"6","C:\\sizl_onhour\\onhour\\src\\routers\\management.js":"7","C:\\sizl_onhour\\onhour\\src\\components\\SideNavigation.js":"8","C:\\sizl_onhour\\onhour\\src\\routers\\Admin.js":"9","C:\\sizl_onhour\\onhour\\src\\routers\\CourseManage.js":"10","C:\\sizl_onhour\\onhour\\src\\components\\Pagination.js":"11","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\PlayList\\PlayListManage.js":"12","C:\\sizl_onhour\\onhour\\src\\components\\CommonTable.js":"13","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Member\\MemberManage.js":"14","C:\\sizl_onhour\\onhour\\src\\components\\HeaderNavs.js":"15","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\PlayList\\PlayListHeader.js":"16","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Member\\MemberHeader.js":"17","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Category\\CategoryHeader.js":"18","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentsHeader.js":"19","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentsLists.js":"20","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Category\\CategoryManage.js":"21","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Category\\CategoryTable.js":"22","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\PlayList\\PlayListTable.js":"23","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Member\\MemberTable.js":"24","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Banner\\BannerManage.js":"25","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Banner\\BannerTable.js":"26","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentManage.js":"27","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentsList.js":"28","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Banner\\BannerHeader.js":"29","C:\\sizl_onhour\\onhour\\src\\components\\SwitchComponent.js":"30","C:\\sizl_onhour\\onhour\\src\\routers\\CourseMake.js":"31","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\Content.js":"32","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ModifyHeader.js":"33","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ContentsModify.js":"34","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ContentsModifies.js":"35","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\VideoModify.js":"36","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\SinkModify.js":"37","C:\\sizl_onhour\\onhour\\src\\components\\VideoView.js":"38","C:\\sizl_onhour\\onhour\\src\\components\\ContentsView.js":"39","C:\\sizl_onhour\\onhour\\src\\components\\SinkView.js":"40","C:\\sizl_onhour\\onhour\\src\\components\\Sink.js":"41","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\WordModify.js":"42","C:\\sizl_onhour\\onhour\\src\\components\\WordView.js":"43","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ProblemModify.js":"44","C:\\sizl_onhour\\onhour\\src\\components\\ProblemView.js":"45","C:\\sizl_onhour\\onhour\\src\\components\\Problem.js":"46","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\ContentsMakes.js":"47","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\MakeHeader.js":"48","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\VideoMake.js":"49","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\ContentsMake.js":"50","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\SinkMake.js":"51","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\WordMake.js":"52","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\ProblemMake.js":"53"},{"size":3099,"mtime":1611309499699,"results":"54","hashOfConfig":"55"},{"size":290,"mtime":1609908558512,"results":"56","hashOfConfig":"55"},{"size":1008,"mtime":1610081205361,"results":"57","hashOfConfig":"55"},{"size":2886,"mtime":1611753390787,"results":"58","hashOfConfig":"55"},{"size":621,"mtime":1609909649039,"results":"59","hashOfConfig":"55"},{"size":638,"mtime":1609909582355,"results":"60","hashOfConfig":"55"},{"size":235,"mtime":1610455131864,"results":"61","hashOfConfig":"55"},{"size":674,"mtime":1611302914246,"results":"62","hashOfConfig":"55"},{"size":246,"mtime":1610455091956,"results":"63","hashOfConfig":"55"},{"size":241,"mtime":1610455137804,"results":"64","hashOfConfig":"55"},{"size":587,"mtime":1610459054826,"results":"65","hashOfConfig":"55"},{"size":1022,"mtime":1610378175292,"results":"66","hashOfConfig":"55"},{"size":1011,"mtime":1610377511582,"results":"67","hashOfConfig":"55"},{"size":1068,"mtime":1610378500525,"results":"68","hashOfConfig":"55"},{"size":1348,"mtime":1611303227729,"results":"69","hashOfConfig":"55"},{"size":376,"mtime":1610593750726,"results":"70","hashOfConfig":"55"},{"size":255,"mtime":1610593758001,"results":"71","hashOfConfig":"55"},{"size":184,"mtime":1610593746094,"results":"72","hashOfConfig":"55"},{"size":728,"mtime":1610459460562,"results":"73","hashOfConfig":"55"},{"size":3550,"mtime":1611553611363,"results":"74","hashOfConfig":"55"},{"size":803,"mtime":1610377860661,"results":"75","hashOfConfig":"55"},{"size":491,"mtime":1610377884362,"results":"76","hashOfConfig":"55"},{"size":510,"mtime":1610378178360,"results":"77","hashOfConfig":"55"},{"size":678,"mtime":1610378449024,"results":"78","hashOfConfig":"55"},{"size":862,"mtime":1610379590341,"results":"79","hashOfConfig":"55"},{"size":119,"mtime":1610379640512,"results":"80","hashOfConfig":"55"},{"size":1878,"mtime":1611552729374,"results":"81","hashOfConfig":"55"},{"size":3314,"mtime":1611573625627,"results":"82","hashOfConfig":"55"},{"size":206,"mtime":1610593754198,"results":"83","hashOfConfig":"55"},{"size":722,"mtime":1610458369799,"results":"84","hashOfConfig":"55"},{"size":237,"mtime":1610455142370,"results":"85","hashOfConfig":"55"},{"size":867,"mtime":1610458797668,"results":"86","hashOfConfig":"55"},{"size":438,"mtime":1611302835601,"results":"87","hashOfConfig":"55"},{"size":7650,"mtime":1611712419987,"results":"88","hashOfConfig":"55"},{"size":1261,"mtime":1611303662372,"results":"89","hashOfConfig":"55"},{"size":2908,"mtime":1610697373469,"results":"90","hashOfConfig":"55"},{"size":8755,"mtime":1611313529735,"results":"91","hashOfConfig":"55"},{"size":4530,"mtime":1611542746070,"results":"92","hashOfConfig":"55"},{"size":2503,"mtime":1611027473603,"results":"93","hashOfConfig":"55"},{"size":2609,"mtime":1611024338316,"results":"94","hashOfConfig":"55"},{"size":3986,"mtime":1610975880736,"results":"95","hashOfConfig":"55"},{"size":3884,"mtime":1611034367785,"results":"96","hashOfConfig":"55"},{"size":2697,"mtime":1611031910997,"results":"97","hashOfConfig":"55"},{"size":10350,"mtime":1611551655245,"results":"98","hashOfConfig":"55"},{"size":3678,"mtime":1611545954936,"results":"99","hashOfConfig":"55"},{"size":4606,"mtime":1611300383950,"results":"100","hashOfConfig":"55"},{"size":1662,"mtime":1611319047700,"results":"101","hashOfConfig":"55"},{"size":443,"mtime":1611302832601,"results":"102","hashOfConfig":"55"},{"size":3349,"mtime":1611545650035,"results":"103","hashOfConfig":"55"},{"size":5335,"mtime":1611317451707,"results":"104","hashOfConfig":"55"},{"size":7964,"mtime":1611318891186,"results":"105","hashOfConfig":"55"},{"size":3436,"mtime":1611319063499,"results":"106","hashOfConfig":"55"},{"size":8654,"mtime":1611551221444,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"px3svi",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"112"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"112"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"132"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"127"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"149"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"149"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"163"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"149"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"149"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"166"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"127"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"166"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"149"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"149"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"149"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"149"},"C:\\sizl_onhour\\onhour\\src\\App.js",[],"C:\\sizl_onhour\\onhour\\src\\index.js",[],["242","243"],"C:\\sizl_onhour\\onhour\\src\\components\\Navigation.js",["244"],"import { Link } from \"react-router-dom\";\r\nimport \"../assets/css/navigation.css\";\r\nfunction Navigation({ location }) {\r\n  return (\r\n    <section className=\"nav__box\">\r\n      <div className=\"nav__left\">\r\n        <img src=\"https://onehour.co.kr/images/headerLogo.png\" />\r\n        <span>|세명컴퓨터고등학교</span>\r\n      </div>\r\n      <div className=\"nav__center\">\r\n        <ul className=\"center__lists\">\r\n          <li>\r\n            <Link to=\"/admin\">수업보기</Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to=\"/course_make\">수업제작</Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to=\"/course_manage\">수업관리</Link>\r\n          </li>\r\n\r\n          <li>\r\n            <Link to=\"/management\">학생관리</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"nav__right\">\r\n        <Link to=\"admin/Edit/content_manage\">\r\n          <span>관리자모드</span>\r\n        </Link>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Navigation;\r\n",["245","246"],"C:\\sizl_onhour\\onhour\\src\\routers\\authorization\\Login.js",["247"],"import React, { useState } from \"react\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport \"../../assets/css/login.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction Login({ history }) {\r\n  const [inputs, setInput] = useState({ email: \"\", password: \"\" });\r\n\r\n  const { email, password } = inputs;\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    setInput({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // res.data.data.token;\r\n    axios\r\n      .post(\"https://1hour.school/user/login\", { email, password })\r\n      .then((res) => {\r\n        console.log(res);\r\n        const {\r\n          data: {\r\n            data: { token },\r\n          },\r\n        } = res;\r\n        // token을 못받았을때 예외처리\r\n        // token을 받고 받은 token을 sessionStorage에 넣어준다.\r\n        sessionStorage.setItem(\"adminToken\", token);\r\n        history.push(\"/admin\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        throw new Error(error);\r\n      });\r\n\r\n    // 받아온 token값을 session에 저장한다. (내가 관리자로 로그인을 했다는 증거)\r\n    // history를 이용해서 이동\r\n    // **예외처리**\r\n    // 조건 1. 아이디나 비밀번호를 입력하세요\r\n    // 조건 2. 존재하지 않는 아이디입니다.\r\n    // 조건 3. 비밀번호가 틀립니다.\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <div>\r\n        <img src={logo} className=\"Login-img\" prop=\"#\" />\r\n      </div>\r\n      <div className=\"Login__container\">\r\n        <span>시작하기</span>\r\n        <p className=\"container__content\">\r\n          환영합니다! 계정이 없다면 회원가입후 이용해주세요\r\n        </p>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"container__box\">\r\n            <label for=\"box__id\">이메일주소</label>\r\n            <input\r\n              name=\"email\"\r\n              type=\"text\"\r\n              id=\"box__id\"\r\n              onChange={onChange}\r\n              value={email}\r\n            />\r\n          </div>\r\n          <div className=\"container__box\">\r\n            <label for=\"box__pw\">비밀번호</label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              id=\"box__pw\"\r\n              onChange={onChange}\r\n              value={password}\r\n            />\r\n          </div>\r\n          <div className=\"Login__section\">\r\n            <button type=\"submit\" className=\"Login__btn\">\r\n              로그인\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div className=\"container__register\">\r\n          <Link to=\"/authorization/register\">\r\n            <span>가입하기</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Login;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\authorization\\Landing.js",["248"],"import \"../../assets/css/landing.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../../assets/img/logo.png\";\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div className=\"Landing\">\r\n      <div className=\"Landing__section\">\r\n        <Link to=\"/authorization/login\">\r\n          <button className=\"Landing__btn\">시작하기</button>\r\n        </Link>\r\n      </div>\r\n      <div className=\"Landing__container\">\r\n        <img src={logo} className=\"Landing-img\" prop=\"#\" />\r\n        <p className=\"Landing-title\">내가 만드는 한 시간 수업</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\authorization\\Register.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\management.js",[],["249","250"],"C:\\sizl_onhour\\onhour\\src\\components\\SideNavigation.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\Admin.js",[],["251","252"],"C:\\sizl_onhour\\onhour\\src\\routers\\CourseManage.js",[],"C:\\sizl_onhour\\onhour\\src\\components\\Pagination.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\PlayList\\PlayListManage.js",["253","254"],"import HeaderNavs from \"../../../components/HeaderNavs\";\r\nimport Pagination from \"../../../components/Pagination\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PlayListTable from \"./PlayListTable\";\r\n\r\nfunction PlayListManage() {\r\n  const [playlists, setPlaylists] = useState({\r\n    rows: [],\r\n    page: 1,\r\n    total: 0,\r\n  });\r\n\r\n  const { rows, page, total } = playlists;\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(`https://1hour.school/api/v1/playlist/load/${page}`, {\r\n      headers: {\r\n        Authorization: sessionStorage.getItem(\"adminToken\"),\r\n      },\r\n    });\r\n\r\n    const { rows, total } = data;\r\n\r\n    console.log(rows);\r\n\r\n    setPlaylists({ ...playlists, rows, total });\r\n  };\r\n\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div>\r\n      <HeaderNavs name={\"playlist\"} navs={rows} />\r\n      <PlayListTable rows={rows} />\r\n      <Pagination total={total} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlayListManage;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\CommonTable.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Member\\MemberManage.js",["255","256"],"import React, { useEffect, useState } from \"react\";\r\nimport HeaderNavs from \"../../../components/HeaderNavs\";\r\nimport Pagination from \"../../../components/Pagination\";\r\nimport axios from \"axios\";\r\nimport MemberTable from \"./MemberTable\";\r\nfunction MemberManage() {\r\n  const [members, setMembers] = useState({\r\n    rows: [],\r\n    tab: -1,\r\n    page: 1,\r\n    total: 0,\r\n  });\r\n\r\n  const { tab, page, rows, total } = members;\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\r\n      `https://1hour.school/api/v1/members/list/\r\n    ${tab}/${page}/query?keyword=`,\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n\r\n    console.log(data);\r\n\r\n    const { rows, total } = data;\r\n    setMembers({ ...members, rows, tab, page, total });\r\n  };\r\n\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div>\r\n      <HeaderNavs name=\"member\" />\r\n      <MemberTable rows={rows} />\r\n      <Pagination total={total} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemberManage;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\HeaderNavs.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\PlayList\\PlayListHeader.js",[],["257","258"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Member\\MemberHeader.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Category\\CategoryHeader.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentsHeader.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentsLists.js",["259","260"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Category\\CategoryManage.js",["261"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport HeaderNavs from \"../../../../components/HeaderNavs\";\r\nimport CategoryTable from \"../Category/CategoryTable\";\r\nfunction CategoryManage() {\r\n  const [categories, setCategories] = useState({\r\n    rows: [],\r\n  });\r\n\r\n  const { rows } = categories;\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\"https://1hour.school/api/v1/category/list\", {\r\n      headers: {\r\n        Authorization: sessionStorage.getItem(\"adminToken\"),\r\n      },\r\n    });\r\n\r\n    setCategories({ rows: data });\r\n  };\r\n\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div>\r\n      <HeaderNavs name={\"category\"} />\r\n      <CategoryTable rows={rows} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryManage;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Category\\CategoryTable.js",[],["262","263"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\PlayList\\PlayListTable.js",[],["264","265"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Member\\MemberTable.js",[],["266","267"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Banner\\BannerManage.js",["268","269","270"],"import React, { useEffect, useState } from \"react\";\r\nimport HeaderNavs from \"../../../components/HeaderNavs\";\r\nimport BannerTable from \"./BannerTable\";\r\nimport axios from \"axios\";\r\n\r\nfunction BannerManage() {\r\n  const [banners, setBanners] = useState({\r\n    rows: [],\r\n    total: 0,\r\n    page: 1,\r\n  });\r\n\r\n  const { rows, total, page } = banners;\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(`https://1hour.school/api/v1/banner/list/${page}`, {\r\n      headers: {\r\n        Authorization: sessionStorage.getItem(\"adminToken\"),\r\n      },\r\n    });\r\n    const { rows, total } = data;\r\n\r\n    setBanners({ ...banners, rows, total });\r\n  };\r\n\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div>\r\n      <HeaderNavs name=\"banner\" />\r\n      <BannerTable rows={rows} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BannerManage;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Banner\\BannerTable.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentManage.js",["271"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ContentsLists from \"./ContentsLists\";\r\n\r\n// 1. 2020-01-07\r\n// lifeCycle : mount : constructor render componentDidmount(1회성)\r\n// update : render , componentDidUpdate\r\n// useEffect : componentDidmount 와 componentDidUpdate역할을 둘다 하는구나\r\n// render가 발생할 때 마다(componentDidMount: 초기, componentDUpdate: 매번) effect가 실행됩니다.\r\n// useEffect(function,[]) ==> fucntion 부분은 ComponentDidmount일때 실행되고 , []안에 값이 있으면 그 값이 update될때마다 function이 작동한다.\r\n// 만약 [] 값이 없으면 어떤 변화가 일어나든지 실행하지 않음 즉 useEffec(function,[]) 는 ComponentDidmount 역할만 한다고 보면됨\r\n\r\n// 2. 2020-01-08\r\n// 처음에 나오고 , 버튼을 클릭하면 업데이트가 되고 그 업데이트 된 값을 가지고 다시 API를 받음\r\n// Life Cycle 이 처음 -> return -> Didmount-> getApi -> setContents -> return\r\n// onClick -> category와 page 바꿔주고 -> return-> Didmount-> getAPI-> setContents -> return\r\n// onClick -> setState 를 통해서 category와 page 바꿔주고 -> return -> Di\r\n\r\n// 3. category의 번호를 확인해보자.\r\n\r\nfunction ContentManage({ history }) {\r\n  // data.data.\r\n  const [list, setList] = useState({\r\n    navs: [],\r\n  });\r\n\r\n  const { navs } = list;\r\n\r\n  const getList = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\"https://1hour.school/api/v1/category/list\", {\r\n      headers: {\r\n        Authorization: sessionStorage.getItem(\"adminToken\"),\r\n      },\r\n    });\r\n    console.log(data);\r\n    setList({\r\n      navs: data,\r\n    });\r\n  };\r\n\r\n  useEffect(getList, []);\r\n\r\n  return (\r\n    <div>\r\n      <ContentsLists navs={navs} history={history} />\r\n    </div>\r\n  );\r\n}\r\nexport default ContentManage;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\ContentsList.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Banner\\BannerHeader.js",[],"C:\\sizl_onhour\\onhour\\src\\components\\SwitchComponent.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\CourseMake.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Contents\\Content.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ModifyHeader.js",[],["272","273"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ContentsModify.js",["274","275","276","277","278","279"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ContentsModifies.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\VideoModify.js",["280","281"],"// 왜 div는 e.target.value가 안돼는가 ??\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../../../../assets/css/modifies/videomodify.css\";\r\nimport VideoView from \"../../../../components/VideoView\";\r\nfunction VideoModify({ contents, history }) {\r\n  const [modifies, setModifies] = useState({\r\n    youtubeTitle: \"\",\r\n    contents,\r\n    title: \"\",\r\n    url: \"\",\r\n    categoryKeys: [],\r\n    categoryNames: [],\r\n  });\r\n\r\n  const { title, url, categoryKeys, categoryNames, youtubeTitle } = modifies;\r\n  // key배열도 추가시켜준다.\r\n  const handleCategory = (e) => {\r\n    const categoryName = e.target.dataset.value;\r\n    const categoryKey = Number(e.target.dataset.pk);\r\n\r\n    if (!categoryNames.includes(categoryName)) {\r\n      categoryNames.push(categoryName);\r\n      categoryKeys.push(categoryKey);\r\n    } else {\r\n      // index를 찾아서 그 인덱스를 제거하여 리턴해준다.(원본값이 바뀌는게 특징이네)\r\n      let num = categoryNames.indexOf(categoryName);\r\n      let num2 = categoryKeys.indexOf(categoryKey);\r\n      categoryNames.splice(num, 1);\r\n      categoryKeys.splice(num2, 1);\r\n    }\r\n\r\n    setModifies({ ...modifies, categoryKeys, categoryNames });\r\n  };\r\n\r\n  const showDropDown = () => {\r\n    document.querySelector(\"#myDropdown\").classList.toggle(\"show\");\r\n  };\r\n\r\n  const saveAndpostApi = async () => {\r\n    axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/update/frame\",\r\n        {\r\n          contents,\r\n          title,\r\n          categories: categoryKeys,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        history.push({\r\n          pathname: \"/admin/Edit/content_edit\",\r\n          state: {\r\n            contents,\r\n            page: 2,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\r\n      `https://1hour.school/api/v1/contents/load/init/${contents}`,\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n\r\n    console.log(data);\r\n\r\n    setModifies({\r\n      ...modifies,\r\n      contents: data.contents,\r\n      title: data.title,\r\n      url: data.url,\r\n      categoryKeys: data.categoryKeys,\r\n      categoryNames: data.categoryNames,\r\n      youtubeTitle: data.youtubeTitle,\r\n    });\r\n  };\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div className=\"videomodify\">\r\n      <VideoView\r\n        handleCategory={handleCategory}\r\n        url={url}\r\n        showDropDown={showDropDown}\r\n        categoryNames={categoryNames}\r\n        youtubeTitle={youtubeTitle}\r\n        title={title}\r\n        saveAndpostApi={saveAndpostApi}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default VideoModify;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\SinkModify.js",["282","283","284"],"import axios from \"axios\";\r\nimport React, { useEffect, useState, version } from \"react\";\r\nimport SinkView from \"../../../../components/SinkView\";\r\nimport \"../../../../assets/css/modifies/sinkmodify.css\";\r\nfunction SinkModify({ contents, history }) {\r\n  const [sinkes, setSinkes] = useState({\r\n    url: \"\",\r\n    paragraphs: [],\r\n    //[{dub:\"\",end:\"\",eng:\"\",kr:\"'\",pk:\"\",start:\"\"},..]\r\n    times: [],\r\n    // [{startValue : 0 , endValue : 0 }, {startValue : 0 , endValue : 0},...]\r\n  });\r\n\r\n  const [youtube, setYoutube] = useState();\r\n\r\n  const { url, paragraphs, times } = sinkes;\r\n\r\n  console.log(paragraphs, \"제일중요\");\r\n\r\n  //1. rendering 이후 getAPi를 가져와서 url 과 paragraphs를 채워 넣는다.\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\r\n      `https://1hour.school/api/v1/contents/load/sync/${contents}`,\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n\r\n    const getURL = data.url;\r\n    const getParagraphs = data.paragraphs;\r\n\r\n    // 받아온 데이터 만큼 time을 넣어준다.\r\n    let inputObj = getParagraphs.map(() => ({\r\n      startValue: 0,\r\n      endValue: 0,\r\n    }));\r\n\r\n    setSinkes({\r\n      ...sinkes,\r\n      url: getURL,\r\n      paragraphs: getParagraphs,\r\n      times: inputObj,\r\n    });\r\n  };\r\n\r\n  const inputValue = (e, index) => {\r\n    const target = Number(e.target.value);\r\n    const name = e.target.name;\r\n\r\n    if (name === \"startValue\") {\r\n      // 이렇게 할경우에는 원본이 바뀌기 때문에, 새로고침할때 문제가 생기겠구나.\r\n      //  1을 증가시킨상태에서 새로고침하면 , 0이 아닌 1인 상태로 나오고\r\n      //  그 상태에서 다시 1 증가시키려고 하면 빈값이 랜더링 된다음에 다시 1로 바뀌므로 별로 좋지 않다.\r\n      // 따라서 되도록이면 원래값을 변화시키는 것은 좋지 않아보인다.\r\n      // 따라서 직접 times를 바꾸는게 아닌 받아오는 걸 통해서 바꿔주엇다.\r\n      times[index].startValue = target;\r\n    } else if (name === \"endValue\") {\r\n      times[index].endValue = target;\r\n    }\r\n\r\n    setSinkes({ ...sinkes, times });\r\n  };\r\n\r\n  // 밀리세컨드를 -> 시 분 초 밀리로 나타넴\r\n  // 3000 -> 000\r\n  // 300 -> 0.300\r\n  // 30 -> 0.0300\r\n  const changeTOstring = (duration) => {\r\n    let milliseconds = parseFloat((duration % 1000) / 100) * 0.1;\r\n    let seconds = parseInt((duration / 1000) % 60);\r\n    let minutes = parseInt((duration / (1000 * 60)) % 60);\r\n    let hours = parseInt((duration / (1000 * 60 * 60)) % 24);\r\n\r\n    console.log(milliseconds);\r\n    console.log(seconds);\r\n\r\n    const sum = milliseconds + seconds;\r\n\r\n    let sumTopoint = parseFloat(sum).toFixed(3); //1.0000\r\n\r\n    hours = hours < 10 ? \"0\" + hours : hours;\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    sumTopoint = sumTopoint < 10 ? \"0\" + sumTopoint : sumTopoint;\r\n\r\n    return `${hours}:${minutes}:${sumTopoint}`;\r\n  };\r\n\r\n  //해결방법\r\n  // 1.입력한초를 밀리세컨드로 바꿔준다.(입력한초가 음수일경우에는 절대값처리해줌)\r\n\r\n  // 2. 밀리세컨드를 구하기 위해 밀리세컨드를 문자열로 바꿔준다.\r\n\r\n  // 3. 데이터 값(문자열)을 가져온다.\r\n\r\n  // 4.1 내가 입력한 값이 양수\r\n  // ------- 입력한 값(문자열)과 가져온 데어터(문자열)를 new Date에 넣어줌으로써 전체 시간의 밀리세컨드 값을 가져온다. 그리고 그 값을 더한다음에 다시 문자열로 바꿔준다.\r\n  // 4.2 내가 입력한 값이 음수\r\n  // ------ 입력한 값(문자열)과 가져온 데어터(문자열)를 new Date에 넣어줌으로써 전체 시간의 밀리세컨드 값을 가져온다.\r\n  //---------------여기서 그 둘이 차가 음수가 나올경우 데이터값보다 내가 입력한 값이 크다는 의미이므로 00:00:00.000이 나올수 있도록 처리해준다.\r\n  //---------------여기서 그 둘의 차가 양수일 경우 데이터값보다 내가 입력한 값이 작다는 의미이므로 그 둘의 차를 문자열로 바꿔준다.\r\n\r\n  // 5.조건에 따라 값을 업데이트 해준다.\r\n  const inputBtn = (e, seconds, index) => {\r\n    const name = e.target.name;\r\n\r\n    // 1.초를 밀리세컨드로 바꾼다.\r\n    let changeToMilliseconds = Math.abs(seconds) * 1000;\r\n\r\n    // 2. 밀리세컨드로 바꾼 초를 문자열로 만들어준다.\r\n    const s_Time = changeTOstring(changeToMilliseconds);\r\n\r\n    // 3. 데이터에서 값을 가져온다.\r\n    let dataTime = 0;\r\n    if (name === \"startBtn\") {\r\n      dataTime = paragraphs[index].start;\r\n    } else if (name === \"endBtn\") {\r\n      dataTime = paragraphs[index].end;\r\n    }\r\n\r\n    let time = \"\";\r\n    if (seconds >= 0) {\r\n      // 4.1 내가 입력한 값이 양수일 경우\r\n      const setplusTime = new Date(`1970/01/01/UTC${s_Time}`);\r\n      const setDatatime = new Date(`1970/01/01/UTC${dataTime}`);\r\n      const plusTime = setplusTime.getTime() + setDatatime.getTime();\r\n      time = changeTOstring(plusTime);\r\n      console.log(time, \"time\");\r\n    } else {\r\n      // 4.2 내가 입력한 값이 음수일 경우\r\n      const setminusTime = new Date(`1970/01/01/UTC${s_Time}`);\r\n      const setDatatime = new Date(`1970/01/01/UTC${dataTime}`);\r\n      const minusTime = setDatatime.getTime() - setminusTime.getTime();\r\n      if (minusTime < 0) {\r\n        const init = 0;\r\n        time = changeTOstring(init);\r\n      } else {\r\n        time = changeTOstring(minusTime);\r\n      }\r\n    }\r\n\r\n    // 조건\r\n    if (name === \"startBtn\") {\r\n      paragraphs[index].start = time;\r\n    } else if (name === \"endBtn\") {\r\n      paragraphs[index].end = time;\r\n    }\r\n    // 5.업데이트\r\n    setSinkes({ ...sinkes, paragraphs });\r\n  };\r\n\r\n  // Yotubed의 onReady의 기능을 사용하기 위한 함수\r\n\r\n  const setReady = (e) => {\r\n    setYoutube(e.target);\r\n  };\r\n\r\n  // 시작 하기 (어디서부터 어디까지 까지 적용해야한다.)\r\n  // 반복되는 루프를 돌아야할것  같은데..\r\n  const playBtn = (index) => {\r\n    const playStime = paragraphs[index].start; // String이니까\r\n    // const playEtime = paragraphs[index].end;\r\n    const changeplayStime = new Date(`1970/01/01/UTC${playStime}`);\r\n    // const changeplayEtime = new Date(`1970/01/01/UTC${playEtime}`);\r\n    const getstartSeconds = changeplayStime / 1000;\r\n    // const getpauseSeconds = changeplayEtime / 1000;\r\n\r\n    youtube.seekTo(getstartSeconds);\r\n  };\r\n\r\n  //  중단하기\r\n  const pauseBtn = () => {\r\n    youtube.pauseVideo();\r\n  };\r\n\r\n  // 잇고 끝기\r\n  const sliceOfTime = (index) => {\r\n    const videoTime = youtube.playerInfo.currentTime;\r\n\r\n    const fixedTime = parseFloat(videoTime).toFixed(3);\r\n    // getTime 초로 나오니까\r\n\r\n    console.log(fixedTime);\r\n    // 이것을 밀리세컨즈로 바꿔준다음에\r\n    const getMil = parseInt(videoTime * 1000);\r\n\r\n    // 이것을 가지고 chageToString에 넣어주는 리턴값을 넣어주면 된다.\r\n    const stringTime = changeTOstring(getMil);\r\n\r\n    console.log(stringTime, \"StringTime\");\r\n\r\n    paragraphs[index].end = stringTime;\r\n    paragraphs[index + 1].start = stringTime;\r\n\r\n    setSinkes({ ...sinkes, paragraphs });\r\n  };\r\n\r\n  // 이전\r\n  const prevBtn = () => {\r\n    history.goBack(-2);\r\n  };\r\n\r\n  // 저장하고 다음으로\r\n\r\n  const saveAndpostApi = async () => {\r\n    await axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/update/sync\",\r\n        {\r\n          contents,\r\n          sentences: paragraphs,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        history.push({\r\n          pathname: \"/admin/Edit/content_edit\",\r\n          state: {\r\n            contents,\r\n            page: 4,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* *엄청중요* 지금의 이 방법은 redering될때 시간이 너무 오래 걸린다는 문제가 있다. redering을 빨리하고 데이터를 가져오는게 좋을것 같다.\r\n      그래서 함수나 데이터 가져오는거는 제일 부모에서 해주는게 좋을것 같은데?? */}\r\n      <SinkView\r\n        url={url}\r\n        paragraphs={paragraphs}\r\n        inputValue={inputValue}\r\n        inputBtn={inputBtn}\r\n        times={times}\r\n        playBtn={playBtn}\r\n        pauseBtn={pauseBtn}\r\n        setReady={setReady}\r\n        sliceOfTime={sliceOfTime}\r\n        prevBtn={prevBtn}\r\n        saveAndpostApi={saveAndpostApi}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SinkModify;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\VideoView.js",["285","286","287","288","289"],"import React from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nfunction VideoView({\r\n  url,\r\n  showDropDown,\r\n  handleCategory,\r\n  youtubeTitle,\r\n  title,\r\n  saveAndpostApi,\r\n  categoryNames,\r\n  name,\r\n  showVideo,\r\n  inputText,\r\n  captions,\r\n  inputCaption,\r\n  setReady,\r\n}) {\r\n  let getTumbnail = \"\";\r\n\r\n  if (url.includes(\"&\")) {\r\n    getTumbnail = url.substring(32, url.indexOf(\"&\"));\r\n  } else {\r\n    getTumbnail = url.substring(32, url.length);\r\n  }\r\n\r\n  const opts = {\r\n    height: \"170\",\r\n    width: \"400\",\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container__header\">\r\n        <div className=\"header__left\">\r\n          <div className=\"left__title\">\r\n            <span>영상주소</span>\r\n            {name === \"make\" ? <span></span> : <span>(수정할수없습니다)</span>}\r\n          </div>\r\n          {name === \"make\" ? (\r\n            <input\r\n              value={url}\r\n              className=\"left__input\"\r\n              onChange={(e) => showVideo(e)}\r\n            />\r\n          ) : (\r\n            <input value={url} readOnly className=\"left__input\" />\r\n          )}\r\n        </div>\r\n        <div className=\"header__right\">\r\n          <span className=\"right__title\">카테고리</span>\r\n          <div class=\"dropdown\">\r\n            <button onClick={showDropDown} class=\"dropbtn\">\r\n              <p>{categoryNames.toString()}</p>\r\n            </button>\r\n            <div id=\"myDropdown\" class=\"dropdown-content\">\r\n              {/* 선택할때마다 이미지가 보이고 안보이는걸 css로 나타내자. */}\r\n              <div className=\"content__list\">\r\n                <img></img>\r\n                <p\r\n                  onClick={handleCategory}\r\n                  data-value=\"영화 속 OST\"\r\n                  data-pk=\"1\"\r\n                >\r\n                  영화속 OST\r\n                </p>\r\n              </div>\r\n              <div className=\"content__list\">\r\n                <img></img>\r\n                <p\r\n                  onClick={handleCategory}\r\n                  data-value=\"공부할 때 듣기 좋은 팝송\"\r\n                  data-pk=\"2\"\r\n                >\r\n                  공부할 때 듣기 좋은 팝송\r\n                </p>\r\n              </div>\r\n              <div className=\"content__list\">\r\n                <img></img>\r\n                <p onClick={handleCategory} data-value=\"TED 강의\" data-pk=\"3\">\r\n                  TED 강의\r\n                </p>\r\n              </div>\r\n              <div className=\"content__list\">\r\n                <img></img>\r\n                <p\r\n                  onClick={handleCategory}\r\n                  data-value=\"세서미 스트리트\"\r\n                  data-pk=\"4\"\r\n                >\r\n                  세서미 스트리트\r\n                </p>\r\n              </div>\r\n              <div className=\"content__list\">\r\n                <img></img>\r\n                <p onClick={handleCategory} data-value=\"Sing Along\" data-pk=\"5\">\r\n                  Sing Along\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container__main\">\r\n        <p className=\"main__title\">{youtubeTitle}</p>\r\n\r\n        <YouTube videoId={getTumbnail} opts={opts} onReady={setReady} />\r\n        \r\n      </div>\r\n      <div className=\"container__footer\">\r\n        <span className=\"footer__title\">수업제목</span>\r\n        {name === \"make\" ? (\r\n          <div>\r\n            <input\r\n              value={title}\r\n              className=\"footer__input\"\r\n              onChange={inputText}\r\n            />\r\n            <div>\r\n              <span>영어 가사/캡션</span>\r\n              <p>마침표/개행을 기준으로해서 자동으로 문장마다 끊어집니다.</p>\r\n              <input\r\n                className=\"footer__caption\"\r\n                value={captions}\r\n                onChange={(e) => inputCaption(e)}\r\n              ></input>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <input value={title} readOnly className=\"footer__input\" />\r\n            <p>\r\n              영어 문장을 입력하면 자동으로 문장단위로 끝어서 표시되고, 번역기\r\n              추가됩니다. 입력칸을 클릭하여 직접 수정할 수도 있습니다.\r\n            </p>\r\n          </div>\r\n        )}\r\n        <div className=\"footer__saveBtn\">\r\n          <button onClick={saveAndpostApi}>저장하고 다음으로</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoView;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\ContentsView.js",[],"C:\\sizl_onhour\\onhour\\src\\components\\SinkView.js",["290","291","292"],"import React, { useEffect, useState } from \"react\";\r\nimport Sink from \"./Sink\";\r\nimport YouTube from \"react-youtube\";\r\n\r\n// 1. 첫번째 문제 , onchange가 다 변한다. 구분짓는 key가 필요할듯\r\n\r\n// 2. paragraphs.start 와 paragraphs.end로 쏴주는데\r\n// 수정되어서 전달되는 값은 start와 end로 전달된다는것 ?\r\n// 해결방법 : 배열로쏴준다.\r\n// 다른방법은 없을까..?\r\n\r\n// 3. 배열안의 객체의 값을 가져오는 방법\r\n\r\nfunction SinkView({\r\n  url,\r\n  paragraphs,\r\n  inputValue,\r\n  inputBtn,\r\n  times,\r\n  playBtn,\r\n  setReady,\r\n  pauseBtn,\r\n  sliceOfTime,\r\n  prevBtn,\r\n  saveAndpostApi,\r\n}) {\r\n  let getTumbnail = \"\";\r\n\r\n  if (url.includes(\"&\")) {\r\n    getTumbnail = url.substring(32, url.indexOf(\"&\"));\r\n  } else {\r\n    getTumbnail = url.substring(32, url.length);\r\n  }\r\n\r\n  const opts = {\r\n    height: \"250\",\r\n    width: \"450\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"sinkmodify\">\r\n      <div className=\"sinkmodify__main\">\r\n        <div className=\"sinkmodify__left\">\r\n          <YouTube videoId={getTumbnail} opts={opts} onReady={setReady} />\r\n\r\n          <p className=\"left__inform\">\r\n            문장이 시작되고 끝나는 시점을 1초, 0.3초 단위로 조절할 수 있습니다.\r\n            <br />\r\n            첫번째 문장이 끝나는 지점에서 바로 다음 문장을 시작하려면 잇고 끊기\r\n            버튼을 눌러주세요.\r\n            <br />\r\n            영어 문장 싱크를 맞추면 한국어 뜻 싱크도 자동으로 맞춰지므로 별도의\r\n            작업이 필요하지 않습니다.\r\n          </p>\r\n        </div>\r\n        <div className=\"sinkmodify__right\">\r\n          {/* 이런표현식 알아두자 index=index+1 */}\r\n          {paragraphs.map((paragraph, index = index + 1) => (\r\n            <Sink\r\n              key={index}\r\n              paragraph={paragraph}\r\n              inputValue={inputValue}\r\n              startValue={times[index].startValue}\r\n              endValue={times[index].endValue}\r\n              index={index}\r\n              times={times}\r\n              inputBtn={inputBtn}\r\n              playBtn={playBtn}\r\n              pauseBtn={pauseBtn}\r\n              sliceOfTime={sliceOfTime}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"sinkmodify__footer\">\r\n        <button onClick={prevBtn} className=\"prevBtn\">\r\n          이전\r\n        </button>\r\n        <button onClick={saveAndpostApi} className=\"nextBtn\">\r\n          저장하고 다음으로\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SinkView;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\Sink.js",["293","294","295","296","297","298","299","300","301","302"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\WordModify.js",["303","304","305"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport WordView from \"../../../../components/WordView\";\r\nimport \"../../../../assets/css/modifies/wordmodify.css\";\r\nfunction WordModify({ contents, history }) {\r\n  const [words, setWords] = useState({\r\n    paragraphs: [],\r\n  });\r\n\r\n  const { paragraphs } = words;\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\r\n      `https://1hour.school/api/v1/contents/load/word/${contents}`,\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n\r\n    const getParapraphs = data.paragraphs;\r\n\r\n    setWords({ ...words, paragraphs: getParapraphs });\r\n  };\r\n\r\n  const chageTextarea = (e, index, lan) => {\r\n    const changeValue = e.target.value;\r\n    //파라그랩스들중 pk가 일치하는 파라그랩스를 값을 가져온다.\r\n\r\n    if (lan === \"en\") {\r\n      paragraphs[index].eng = changeValue;\r\n    } else if (lan === \"ko\") {\r\n      paragraphs[index].kor = changeValue;\r\n    }\r\n\r\n    console.log(paragraphs);\r\n\r\n    setWords({ ...words, paragraphs });\r\n  };\r\n\r\n  const TranslationApi = async (e, index) => {\r\n    let inputEng = e.target.value;\r\n\r\n    const {\r\n      data: { data },\r\n    } = await axios.post(\r\n      `https://1hour.school/api/v1/translate/single`,\r\n      { paragraphs: inputEng },\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n\r\n    paragraphs[index] = data;\r\n\r\n    setWords({ ...words, paragraphs });\r\n  };\r\n\r\n  const addLists = () => {\r\n    let newLists = {};\r\n    for (let i = 0; i < 10; i++) {\r\n      newLists = {\r\n        pk: `${i + 1}`,\r\n        eng: \"\",\r\n        kor: \"\",\r\n      };\r\n      paragraphs.push(newLists);\r\n    }\r\n\r\n    setWords({ ...words, paragraphs });\r\n  };\r\n\r\n  // 5.이전으로 가는 함수\r\n  const prevBtn = () => {\r\n    history.goBack(-2);\r\n    // 근데 이렇게 router를 짜도 될까..??\r\n  };\r\n\r\n  // 6 삭제해주는 함수\r\n\r\n  const deleteBtn = (index) => {\r\n    paragraphs.splice(index, 1);\r\n\r\n    setWords({ ...words, paragraphs });\r\n  };\r\n\r\n  const saveAndpostApi = async () => {\r\n    console.log(paragraphs);\r\n\r\n    // 1. 배열에 kor or eng가 빈칸이 있으면 다 지워준다.\r\n    const filterParagraphs = paragraphs.filter((paragraph) => {\r\n      if (paragraph.kor !== \"\" && paragraph.eng !== \"\") {\r\n        return paragraph;\r\n      }\r\n    });\r\n\r\n    console.log(filterParagraphs);\r\n\r\n    // 2. 배열이 pk값이 string인 것을 null로 다 바꿔준다.\r\n    // 값을 바꿔주는 용도의 함수가 아닐텐데 map이..\r\n    const changeParagraphs = filterParagraphs.map((filterParagraph) => {\r\n      if (typeof filterParagraph.pk === \"string\") {\r\n        filterParagraph.pk = null;\r\n      }\r\n      return filterParagraph;\r\n    });\r\n\r\n    console.log(changeParagraphs);\r\n\r\n    await axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/update/word\",\r\n        {\r\n          contents,\r\n          words: changeParagraphs,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        console.log(contents);\r\n        history.push({\r\n          pathname: \"/admin/Edit/content_edit\",\r\n          state: {\r\n            contents,\r\n            page: 5,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(getApi, []);\r\n\r\n  return (\r\n    <div className=\"wordmodify\">\r\n      <WordView\r\n        paragraphs={paragraphs}\r\n        TranslationApi={TranslationApi}\r\n        chageTextarea={chageTextarea}\r\n        addLists={addLists}\r\n        saveAndpostApi={saveAndpostApi}\r\n        prevBtn={prevBtn}\r\n        deleteBtn={deleteBtn}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordModify;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\WordView.js",["306","307","308"],"import React from \"react\";\r\nimport delete_btn from \"../assets/img/delete.png\";\r\n\r\nfunction WordView({\r\n  paragraphs,\r\n  TranslationApi,\r\n  chageTextarea,\r\n  addLists,\r\n  saveAndpostApi,\r\n  prevBtn,\r\n  deleteBtn,\r\n}) {\r\n  console.log(paragraphs);\r\n  return (\r\n    <div>\r\n      <div className=\"wordmodify__header\">\r\n        <div className=\"header__setting\">\r\n          <span>엑셀설정</span>\r\n          <span>{/* setting창  */}</span>\r\n        </div>\r\n        <div className=\"header__title\">\r\n          <span>단어</span>\r\n          <span>한국어 뜻</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"wordmodify__main\">\r\n        <div className=\"main__left\">\r\n          {paragraphs.map((paragraph, index = index + 1) => (\r\n            <div key={index} className=\"left__list\">\r\n              <textarea\r\n                className=\"left__textarea\"\r\n                onBlur={() => TranslationApi(window.event, index)}\r\n                value={paragraph.eng}\r\n                onChange={() => chageTextarea(window.event, index, \"en\")}\r\n              ></textarea>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"main__right\">\r\n          {paragraphs.map((paragraph, index = index + 1) => (\r\n            <div className=\"right__box\">\r\n              <div key={index} className=\"right__list\">\r\n                <textarea\r\n                  className=\"right__textarea\"\r\n                  value={paragraph.kor}\r\n                  onChange={() => chageTextarea(window.event, index, \"ko\")}\r\n                ></textarea>\r\n              </div>\r\n              <div className=\"right__delete\">\r\n                <img src={delete_btn} onClick={() => deleteBtn(index)}></img>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"wordmodify__add\">\r\n        {/* add버튼을 누르면 setState에 {pk : null , kor : \"\" , eng : \"\"} 인것을 10개 넣어준다. */}\r\n        {/* 만약에 빈칸을 보내면 안되므로, 저장하기 전에 예외처리를 해줘야겠다.\r\n        kor or eng가 비어있을경우 paragrapsh의 것들을 삭제시켜준다. */}\r\n\r\n        <div className=\"add_btn\">\r\n          <button onClick={addLists}>플러스버튼</button>\r\n        </div>\r\n        <p>10칸 더 추가하기</p>\r\n      </div>\r\n      <div className=\"wordmodify__footer\">\r\n        {/* 이전 , 저장하고 다음으로 */}\r\n        <button onClick={prevBtn} className=\"footer__prevBtn\">\r\n          이전으로\r\n        </button>\r\n        <button className=\"footer_saveBtn\" onClick={saveAndpostApi}>\r\n          저장하고 다음으로\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordView;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Modifies\\ProblemModify.js",["309","310"],"import axios from \"axios\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport ProblemView from \"../../../../components/ProblemView\";\r\n\r\n// 뜬금 전역변수..\r\nlet num = 0;\r\n\r\nfunction ProblemModify({ contents, history }) {\r\n  const init = {\r\n    pk: null,\r\n    title: \"\",\r\n    questionText: \"\",\r\n    questionImg: null,\r\n    commentaryText: \"\",\r\n    commentaryImg: null,\r\n\r\n    answers: [\r\n      {\r\n        pk: null,\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        pk: null,\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        pk: null,\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        pk: null,\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        pk: null,\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // 공통 : 화면은 임시의 데이터로 뿌려준다.\r\n\r\n  //1. 데이터가 없을시 , 초기 데이터를 뿌려준다.(v)\r\n\r\n  //2. 데이터가 있을시 , 데이터 만큼 임시의 데이터에 뿌려주고, 실질 데이터에도 뿌려준다. (v)\r\n\r\n  //3. 데이터 수정시 , 임의의 데이터도 수정되어야 하고 문제열 추가하기를 누를때 실질 데이터에 추가 되어야한다.\r\n\r\n  //4. 새로운 문제 추가시 임의의 데이터에만 초기값 데이터가 추가된다.\r\n\r\n  //5. 문제열 추가시 실질 데이터에 추가된 데이터가 추가된다.\r\n\r\n  //6. 클릭시 해당 데이터가 보이는것은 임의의 데이터가 보여져야 한다. 그 이유는 화면에 보여지는게 임의의 데이터이기 때문이다.\r\n\r\n  //7. 삭제시 , 실질데이터도 삭제되고 , 임의의 데이터도 삭제되어야하며 보여주는 화면은 임의의 데이터의 마지막 화면이어야한다.\r\n\r\n  const [problem, setProblem] = useState({\r\n    questions: [init],\r\n    subquestions: [],\r\n  });\r\n\r\n  const { questions, subquestions } = problem;\r\n\r\n  console.log(problem);\r\n\r\n  const questionfile = useRef();\r\n  const commentaryfile = useRef();\r\n\r\n  console.log(num, \"num\");\r\n  console.log(questions, \"questions\");\r\n  console.log(subquestions, \"subquestions\");\r\n\r\n  const getApi = async () => {\r\n    const {\r\n      data: { data },\r\n    } = await axios.get(\r\n      `https://1hour.school/api/v1/contents/load/question/${contents}`,\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n\r\n    // 얕은복사 vs 깊은복사\r\n    // spread 나 Object.assign 사용\r\n    // 배열은 깊은 복사로 해줘야함\r\n    // slice()\r\n    // 대신 배열안에 객체(참조형 요소) 가 있으면 slice()를 하더라고 얕은 복사가 된다.\r\n    // 따라서 배열안에 객체요소가 있으면 deepcopy를 해줘야한다.\r\n    const getquestions = data.questions;\r\n\r\n    const copy_getquestions = deepCopy(getquestions);\r\n\r\n    console.log(getquestions);\r\n    console.log(copy_getquestions);\r\n\r\n    if (getquestions[0] !== undefined) {\r\n      setProblem({\r\n        ...problem,\r\n        questions: getquestions,\r\n        subquestions: copy_getquestions,\r\n      });\r\n\r\n      // 이렇게 하면 questions를 바꿔줘도 subquestions가 변하는 현상이 발생한다. why? 같은 객체를 받기때문에 같은 주소를 할당하니까\r\n      // setProblem({\r\n      //   ...problem,\r\n      //   questions: getquestions,\r\n      //   subquestions: getquestions,\r\n      // });\r\n    }\r\n  };\r\n\r\n  //param = [{},{},{}]\r\n  // 배열도 객체(object)\r\n  // 배열의 DeepCopy 하는법(재귀함수이용)\r\n  // 그런데 이렇게 deepCopy를 하면 성능에 있어 안좋다고 하니까. 새로운 DeepCopy방법을 찾아보자\r\n  const deepCopy = (params) => {\r\n    return JSON.parse(JSON.stringify(params));\r\n  };\r\n\r\n  // 입력시 임의의 데이터에만 들어감\r\n  const inputValue = (e, highindex) => {\r\n    const textValue = e.target.value;\r\n    const textName = e.target.name;\r\n\r\n    // 왜 Switch문이 적용되기 전에 이미 questions 가 바뀌는 것일까?\r\n    // console.log()가 큐에 쌓이기 때문에 최종적으로 배열/객체의 가장 최근 값을 출력한다.\r\n    // 따라서 이미 적용된 상태에서 출력 되는거임\r\n\r\n    // **객체 복사무조건 해줘야지 !!**\r\n    // 공식 react 자료에 직접적으로 객체를 바꾸는 건 좋지 않다고 함\r\n\r\n    const copy_questions = deepCopy(questions);\r\n\r\n    switch (textName) {\r\n      case \"matter\":\r\n        copy_questions[highindex].title = textValue;\r\n        break;\r\n      case \"text_sentence\":\r\n        copy_questions[highindex].questionText = textValue;\r\n        break;\r\n      case \"commentary\":\r\n        copy_questions[highindex].commentaryText = textValue;\r\n        break;\r\n    }\r\n\r\n    setProblem({\r\n      ...problem,\r\n      questions: copy_questions,\r\n    });\r\n  };\r\n  // 입력시 임의의 데이터에만 들어감\r\n  const inputAnswer = (e, highindex, index) => {\r\n    const answerValue = e.target.value;\r\n\r\n    const copy_questions = deepCopy(questions);\r\n\r\n    copy_questions[highindex].answers[index].answer = answerValue;\r\n\r\n    setProblem({ ...problem, questions: copy_questions });\r\n  };\r\n\r\n  // 입력시 임의의 데이터에만 들어감\r\n  // 나중에 5개중에 하나만 클릭되어야함\r\n  // answer 중에 하나가 true일 경우 나머지는 false로 처리해야함\r\n  // 굳이 여기서 또 redering을 할 필요가 없는데 해주네..\r\n  // 그냥 눌렀을때 기고 아니고만 바꿔주면 될듯함\r\n  const checkBtn = (e, highindex, index) => {\r\n    // 내가 클릭한것을 제외한 나머지는 flase 처리해야함\r\n\r\n    const copy_getquestions = deepCopy(questions);\r\n    console.log(copy_getquestions);\r\n    console.log(highindex, \"h\");\r\n    console.log(index, \"i\");\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n      copy_getquestions[highindex].answers[i].correct = false;\r\n    }\r\n\r\n    copy_getquestions[highindex].answers[index].correct = true;\r\n\r\n    setProblem({ ...problem, questions: copy_getquestions });\r\n  };\r\n\r\n  const questionBtn = () => {\r\n    questionfile.current.click();\r\n  };\r\n\r\n  const updateQuestion = (e, highindex) => {\r\n    let formData = new FormData();\r\n    const file = e.target.files[0];\r\n\r\n    formData.append(\"file\", file);\r\n\r\n    axios\r\n      .post(\"https://1hour.school/api/v1/file/upload\", formData, {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      })\r\n      .then((res) => {\r\n        const {\r\n          data: { data },\r\n        } = res;\r\n\r\n        const copy_questions = deepCopy(questions);\r\n\r\n        copy_questions[highindex].questionImg = data.url;\r\n        setProblem({ ...problem, questions: copy_questions });\r\n      });\r\n  };\r\n\r\n  const commantaryBtn = () => {\r\n    commentaryfile.current.click();\r\n  };\r\n\r\n  const updateCommantary = (e, highindex) => {\r\n    let formData = new FormData();\r\n    const file = e.target.files[0];\r\n\r\n    formData.append(\"file\", file);\r\n\r\n    axios\r\n      .post(\"https://1hour.school/api/v1/file/upload\", formData, {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        const {\r\n          data: { data },\r\n        } = res;\r\n\r\n        const copy_questions = deepCopy(questions);\r\n\r\n        copy_questions[highindex].commentaryImg = data.url;\r\n        setProblem({ ...problem, questions: copy_questions });\r\n      });\r\n  };\r\n\r\n  // 문자열에 추가하기\r\n\r\n  const addPreview = () => {\r\n    let copy_subquestions = deepCopy(subquestions);\r\n\r\n    copy_subquestions = questions;\r\n\r\n    setProblem({ ...problem, subquestions: copy_subquestions });\r\n  };\r\n\r\n  // 새로운 문제 추가하기\r\n\r\n  const addProblem = () => {\r\n    num++;\r\n    console.log(num);\r\n    const copy_questions = deepCopy(questions);\r\n\r\n    // 문제를 추가할때\r\n    copy_questions.push(init);\r\n\r\n    setProblem({ ...problem, questions: copy_questions });\r\n  };\r\n\r\n  // 문자열 삭제하기\r\n  // 데이터가 아무것도 없을때는 다시 초기값을 넣어준다\r\n  // 데이터가 1개일경우 삭제할때\r\n  const deleteProblem = (index) => {\r\n    console.log(index, \"index\");\r\n    const copy_questions = deepCopy(questions);\r\n    copy_questions.splice(index, 1);\r\n\r\n    if (copy_questions.length === 0) {\r\n      setProblem({\r\n        ...problem,\r\n        questions: [init],\r\n        subquestions: copy_questions,\r\n      });\r\n    } else {\r\n      setProblem({\r\n        ...problem,\r\n        questions: copy_questions,\r\n        subquestions: copy_questions,\r\n      });\r\n    }\r\n  };\r\n\r\n  // 클릭시 문제에 떠야함\r\n  const clickChangeView = (index) => {\r\n    num = index;\r\n    const copy_questions = deepCopy(questions);\r\n    setProblem({ ...problem, questions: copy_questions });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getApi();\r\n    console.log(\"Effect\");\r\n  }, []);\r\n\r\n  // 5.이전으로 가는 함수\r\n  const prevBtn = () => {\r\n    history.goBack(-2);\r\n    // 근데 이렇게 router를 짜도 될까..??\r\n  };\r\n\r\n  // 6.저장후 다음페이지로 이동\r\n\r\n  const saveAndpostApi = async () => {\r\n    await axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/update/question\",\r\n        {\r\n          contents,\r\n          questions,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        history.push(\"/admin/Edit/content_manage\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ProblemView\r\n        questions={questions}\r\n        inputValue={inputValue}\r\n        inputAnswer={inputAnswer}\r\n        checkBtn={checkBtn}\r\n        questionfile={questionfile}\r\n        questionBtn={questionBtn}\r\n        updateQuestion={updateQuestion}\r\n        commentaryfile={commentaryfile}\r\n        commantaryBtn={commantaryBtn}\r\n        updateCommantary={updateCommantary}\r\n        addPreview={addPreview}\r\n        subquestions={subquestions}\r\n        addProblem={addProblem}\r\n        clickChangeView={clickChangeView}\r\n        num={num}\r\n        deleteProblem={deleteProblem}\r\n        prevBtn={prevBtn}\r\n        saveAndpostApi={saveAndpostApi}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProblemModify;\r\n","C:\\sizl_onhour\\onhour\\src\\components\\ProblemView.js",["311","312","313","314","315"],"C:\\sizl_onhour\\onhour\\src\\components\\Problem.js",["316","317","318","319","320","321","322","323","324"],"import React from \"react\";\r\nimport delete_btn from \"../assets/img/delete.png\";\r\nimport uploadImage_btn from \"../assets/img/uploadImage.png\";\r\nimport checkGray from \"../assets/img/checkGray.png\";\r\nimport checkBlue from \"../assets/img/checkBlue.png\";\r\n\r\nfunction Problem({\r\n  questions,\r\n  inputValue,\r\n  inputAnswer,\r\n  checkBtn,\r\n  questionfile,\r\n  questionBtn,\r\n  updateQuestion,\r\n  commentaryfile,\r\n  commantaryBtn,\r\n  updateCommantary,\r\n  num,\r\n  deleteProblem,\r\n}) {\r\n  console.log(num);\r\n  return (\r\n    <div className=\"problem__inputlists\">\r\n      <div className=\"list__matter\">\r\n        <span className=\"matter__num\">#{num + 1}</span>\r\n        <textarea\r\n          className=\"matter__textarea\"\r\n          value={questions[num].title}\r\n          placeholder=\"문제를 입력해주세요\"\r\n          onChange={(e) => inputValue(e, num)}\r\n          name=\"matter\"\r\n        ></textarea>\r\n        <img\r\n          src={delete_btn}\r\n          className=\"matter_delete-btn\"\r\n          onClick={() => deleteProblem(num)}\r\n        ></img>\r\n      </div>\r\n      <div className=\"list__sentence\">\r\n        <div>\r\n          {/* 이미지가 잇을경우에는 Text가 아닌 이미지로 들어감 */}\r\n          {questions[num].questionImg !== null ? (\r\n            <img\r\n              src={questions[num].questionImg}\r\n              style={{ width: \"300px\", height: \"300px\" }}\r\n            ></img>\r\n          ) : (\r\n            <textarea\r\n              className=\"sentence__textarea\"\r\n              placeholder=\"지문을 입력하거나 이미지를 올려주세요\"\r\n              name=\"text_sentence\"\r\n              value={questions[num].questionText}\r\n              onChange={(e) => inputValue(e, num)}\r\n            ></textarea>\r\n          )}\r\n          <div className=\"sentence__upload\">\r\n            <img\r\n              src={uploadImage_btn}\r\n              className=\"sentence__upload-img\"\r\n              onClick={questionBtn}\r\n            ></img>\r\n          </div>\r\n          <input\r\n            type=\"file\"\r\n            style={{ display: \"none\" }}\r\n            className=\"upload-btn\"\r\n            ref={questionfile}\r\n            onChange={(e) => updateQuestion(e, num)}\r\n            accept=\"image/*\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"list__answer\">\r\n        {questions[num].answers.map((a, index = index + 1) => (\r\n          <div className=\"answer__list\">\r\n            <div className=\"list__num\">\r\n              <span>{index + 1}</span>\r\n            </div>\r\n            {questions[num].answers[index].correct === false ? (\r\n              <img\r\n                className=\"list__check\"\r\n                src={checkGray}\r\n                onClick={(e) => checkBtn(e, num, index)}\r\n              ></img>\r\n            ) : (\r\n              <img\r\n                className=\"list__check\"\r\n                src={checkBlue}\r\n                onClick={(e) => checkBtn(e, num, index)}\r\n              ></img>\r\n            )}\r\n\r\n            <div className=\"list__box\">\r\n              <textarea\r\n                className=\"list__textarea\"\r\n                placeholder=\"답변을 작성해주세요\"\r\n                value={questions[num].answers[index].answer}\r\n                onChange={(e) => inputAnswer(e, num, index)}\r\n              ></textarea>\r\n            </div>\r\n            <img className=\"list__delete-btn\" src={delete_btn}></img>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"list__commentary\">\r\n        <div className=\"commentary__box\">\r\n          {questions[num].commentaryImg !== null ? (\r\n            <img\r\n              src={questions[num].commentaryImg}\r\n              style={{ width: \"300px\", height: \"300px\" }}\r\n            ></img>\r\n          ) : (\r\n            <textarea\r\n              name=\"commentary\"\r\n              className=\"commentary__textarea\"\r\n              placeholder=\"해설을 입력해주세요 (생략 가능)\"\r\n              onChange={(e) => inputValue(e, num)}\r\n              value={questions[num].commentaryText}\r\n            ></textarea>\r\n          )}\r\n          <div className=\"commentary__upload\">\r\n            <img\r\n              className=\"commentary__upload-img\"\r\n              src={uploadImage_btn}\r\n              onClick={commantaryBtn}\r\n            ></img>\r\n          </div>\r\n          <input\r\n            type=\"file\"\r\n            style={{ display: \"none\" }}\r\n            className=\"upload-btn\"\r\n            ref={commentaryfile}\r\n            onChange={(e) => updateCommantary(e, num)}\r\n            accept=\"image/*\"\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Problem;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\ContentsMakes.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\MakeHeader.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\VideoMake.js",[],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\ContentsMake.js",["325","326","327","328"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ContentsView from \"../../.././../components/ContentsView\";\r\n\r\nfunction ContentsMakes({ contents, history, paragraphs }) {\r\n  const [modifies_two, setModifies_two] = useState({\r\n    contents, //컨텐츠 pk\r\n    paragraphs,\r\n  });\r\n\r\n  console.log(contents, \"content\");\r\n  console.log(paragraphs);\r\n\r\n  // 1.Textarea에 값 입력시 변경하는 함수\r\n  const chageTextarea = (e, pk, lan) => {\r\n    console.log(pk);\r\n    const changeValue = e.target.value;\r\n    //파라그랩스들중 pk가 일치하는 파라그랩스를 값을 가져온다.\r\n    const result = paragraphs.find((paragraph) => paragraph.pk === pk);\r\n    //그 파라스랩스를 바뀐 값으로 바꿔준다.\r\n    // 파라그랩스들중 result와 일치하는 index를 가져온다\r\n    console.log(result);\r\n    const findIndex = paragraphs.indexOf(result);\r\n    // 그 일치하는 파라그랩스의 eng를 입력값으로 바꿔준다.\r\n    console.log(findIndex);\r\n    if (lan == \"en\") {\r\n      paragraphs[findIndex].eng = changeValue;\r\n    } else if (lan == \"ko\") {\r\n      paragraphs[findIndex].kor = changeValue;\r\n    }\r\n\r\n    console.log(paragraphs);\r\n\r\n    setModifies_two({ ...contents, paragraphs });\r\n  };\r\n\r\n  // 2.입력된 값을 번역하여 바꿔주는 API\r\n  const TranslationApi = async (e, pk) => {\r\n    let inputEng = e.target.value;\r\n    const {\r\n      data: { data },\r\n    } = await axios.post(\r\n      `https://1hour.school/api/v1/translate/single`,\r\n      { paragraphs: inputEng },\r\n      {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      }\r\n    );\r\n    // pk가 같을때 그 부분에다가 넣어준다.\r\n    //1. pk를 가져온다.\r\n    //2. 기존에 있던 배열과 pk 부분이 일치한 부분을 찾아 바꿔준다.\r\n    //3. data 자체에는 pk가 없으므로 pk를 data에 추가시킨다.\r\n    //3.바꾼 데이터를 set해서 넣어준다.\r\n    // paragraph.kp 와 === pk가 일치하는 파라그랩스 를 리턴해준다.\r\n    // find는 값을 리턴해주는반면 , filter은 일치하는 모든 값을 리턴해주기에 배열로 리턴해준다.\r\n\r\n    console.log(data);\r\n    const result = paragraphs.find((paragraph) => paragraph.pk === pk);\r\n    // 파라그랩스들중 result와 일치하는 index를 가져온다\r\n    const findIndex = paragraphs.indexOf(result);\r\n    // data에는 eng와 kor 밖에 없으므로 , data에 pk를 넣어서 전달한다.\r\n    // 현재 data 의 모습은  {eng kor}\r\n    // 넣어야할 data의 모습은 {pk,eng,kor}\r\n\r\n    const newData = {};\r\n    newData.pk = pk;\r\n    newData.eng = data.eng;\r\n    newData.kor = data.kor;\r\n\r\n    console.log(newData);\r\n\r\n    // 일치하는 index를 data로 바꿔준다.\r\n    paragraphs.splice(findIndex, 1, newData);\r\n    console.log(paragraphs);\r\n    // 바꾼 파라그랩스들을 다시 set 해준다.\r\n    setModifies_two({ ...modifies_two, paragraphs });\r\n  };\r\n\r\n  // 4. 리스트를 추가하는 함수\r\n\r\n  const addLists = () => {\r\n    let newLists = {};\r\n    for (let i = 0; i < 10; i++) {\r\n      newLists = {\r\n        pk: `${i + 1}`,\r\n        eng: \"\",\r\n        kor: \"\",\r\n      };\r\n      paragraphs.push(newLists);\r\n    }\r\n\r\n    setModifies_two({ ...modifies_two, paragraphs });\r\n  };\r\n\r\n  // 5.이전으로 가는 함수\r\n  const prevBtn = () => {\r\n    history.goBack(-2);\r\n    // 근데 이렇게 router를 짜도 될까..??\r\n  };\r\n\r\n  // 6.저장후 다음페이지로 이동\r\n\r\n  const saveAndpostApi = async () => {\r\n    console.log(paragraphs);\r\n\r\n    // 1. 배열에 kor or eng가 빈칸이 있으면 다 지워준다.\r\n    const filterParagraphs = paragraphs.filter((paragraph) => {\r\n      if (paragraph.kor !== \"\" && paragraph.eng !== \"\") {\r\n        return paragraph;\r\n      }\r\n    });\r\n\r\n    console.log(filterParagraphs);\r\n\r\n    // 2. 배열이 pk값이 string인 것을 null로 다 바꿔준다.\r\n    // 값을 바꿔주는 용도의 함수가 아닐텐데 map이..\r\n    const changeParagraphs = filterParagraphs.map((filterParagraph) => {\r\n      if (typeof filterParagraph.pk === \"string\") {\r\n        filterParagraph.pk = null;\r\n      }\r\n      return filterParagraph;\r\n    });\r\n\r\n    console.log(changeParagraphs);\r\n\r\n    await axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/create/sentence\",\r\n        {\r\n          contents,\r\n          sentences: changeParagraphs,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        const {\r\n          data: { data },\r\n        } = res;\r\n\r\n        console.log(data);\r\n\r\n        history.push({\r\n          pathname: \"/admin/Edit/mediatool_manage\",\r\n          state: {\r\n            contents: data.contents,\r\n            page: 3,\r\n            paragraphs: data.paragraphs,\r\n            url: data.url,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"contentsmake\">\r\n      <ContentsView\r\n        paragraphs={paragraphs}\r\n        addLists={addLists}\r\n        prevBtn={prevBtn}\r\n        saveAndpostApi={saveAndpostApi}\r\n        chageTextarea={chageTextarea}\r\n        TranslationApi={TranslationApi}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default ContentsMakes;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\SinkMake.js",["329"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport SinkView from \"../../../../components/SinkView\";\r\nfunction SinkMake({ history, contents, url, paragraphs }) {\r\n  let inputObj = paragraphs.map(() => ({\r\n    startValue: 0,\r\n    endValue: 0,\r\n  }));\r\n\r\n  const [sinkes, setSinkes] = useState({\r\n    url,\r\n    paragraphs,\r\n    //[{dub:\"\",end:\"\",eng:\"\",kr:\"'\",pk:\"\",start:\"\"},..]\r\n    times: inputObj,\r\n    // [{startValue : 0 , endValue : 0 }, {startValue : 0 , endValue : 0},...]\r\n  });\r\n\r\n  const [youtube, setYoutube] = useState();\r\n\r\n  const { times } = sinkes;\r\n\r\n  console.log(paragraphs, \"제일중요\");\r\n\r\n  //1. rendering 이후 getAPi를 가져와서 url 과 paragraphs를 채워 넣는다.\r\n\r\n  const inputValue = (e, index) => {\r\n    const target = Number(e.target.value);\r\n    const name = e.target.name;\r\n\r\n    if (name === \"startValue\") {\r\n      // 이렇게 할경우에는 원본이 바뀌기 때문에, 새로고침할때 문제가 생기겠구나.\r\n      //  1을 증가시킨상태에서 새로고침하면 , 0이 아닌 1인 상태로 나오고\r\n      //  그 상태에서 다시 1 증가시키려고 하면 빈값이 랜더링 된다음에 다시 1로 바뀌므로 별로 좋지 않다.\r\n      // 따라서 되도록이면 원래값을 변화시키는 것은 좋지 않아보인다.\r\n      // 따라서 직접 times를 바꾸는게 아닌 받아오는 걸 통해서 바꿔주엇다.\r\n      times[index].startValue = target;\r\n    } else if (name === \"endValue\") {\r\n      times[index].endValue = target;\r\n    }\r\n\r\n    setSinkes({ ...sinkes, times });\r\n  };\r\n\r\n  // 밀리세컨드를 -> 시 분 초 밀리로 나타넴\r\n  // 3000 -> 000\r\n  // 300 -> 0.300\r\n  // 30 -> 0.0300\r\n  const changeTOstring = (duration) => {\r\n    let milliseconds = parseFloat((duration % 1000) / 100) * 0.1;\r\n    let seconds = parseInt((duration / 1000) % 60);\r\n    let minutes = parseInt((duration / (1000 * 60)) % 60);\r\n    let hours = parseInt((duration / (1000 * 60 * 60)) % 24);\r\n\r\n    console.log(milliseconds);\r\n    console.log(seconds);\r\n\r\n    const sum = milliseconds + seconds;\r\n\r\n    let sumTopoint = parseFloat(sum).toFixed(3); //1.0000\r\n\r\n    hours = hours < 10 ? \"0\" + hours : hours;\r\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n    sumTopoint = sumTopoint < 10 ? \"0\" + sumTopoint : sumTopoint;\r\n\r\n    return `${hours}:${minutes}:${sumTopoint}`;\r\n  };\r\n\r\n  //해결방법\r\n  // 1.입력한초를 밀리세컨드로 바꿔준다.(입력한초가 음수일경우에는 절대값처리해줌)\r\n\r\n  // 2. 밀리세컨드를 구하기 위해 밀리세컨드를 문자열로 바꿔준다.\r\n\r\n  // 3. 데이터 값(문자열)을 가져온다.\r\n\r\n  // 4.1 내가 입력한 값이 양수\r\n  // ------- 입력한 값(문자열)과 가져온 데어터(문자열)를 new Date에 넣어줌으로써 전체 시간의 밀리세컨드 값을 가져온다. 그리고 그 값을 더한다음에 다시 문자열로 바꿔준다.\r\n  // 4.2 내가 입력한 값이 음수\r\n  // ------ 입력한 값(문자열)과 가져온 데어터(문자열)를 new Date에 넣어줌으로써 전체 시간의 밀리세컨드 값을 가져온다.\r\n  //---------------여기서 그 둘이 차가 음수가 나올경우 데이터값보다 내가 입력한 값이 크다는 의미이므로 00:00:00.000이 나올수 있도록 처리해준다.\r\n  //---------------여기서 그 둘의 차가 양수일 경우 데이터값보다 내가 입력한 값이 작다는 의미이므로 그 둘의 차를 문자열로 바꿔준다.\r\n\r\n  // 5.조건에 따라 값을 업데이트 해준다.\r\n  const inputBtn = (e, seconds, index) => {\r\n    const name = e.target.name;\r\n\r\n    // 1.초를 밀리세컨드로 바꾼다.\r\n    let changeToMilliseconds = Math.abs(seconds) * 1000;\r\n\r\n    // 2. 밀리세컨드로 바꾼 초를 문자열로 만들어준다.\r\n    const s_Time = changeTOstring(changeToMilliseconds);\r\n\r\n    // 3. 데이터에서 값을 가져온다.\r\n    let dataTime = 0;\r\n    if (name === \"startBtn\") {\r\n      dataTime = paragraphs[index].start;\r\n    } else if (name === \"endBtn\") {\r\n      dataTime = paragraphs[index].end;\r\n    }\r\n\r\n    let time = \"\";\r\n    if (seconds >= 0) {\r\n      // 4.1 내가 입력한 값이 양수일 경우\r\n      const setplusTime = new Date(`1970/01/01/UTC${s_Time}`);\r\n      const setDatatime = new Date(`1970/01/01/UTC${dataTime}`);\r\n      const plusTime = setplusTime.getTime() + setDatatime.getTime();\r\n      time = changeTOstring(plusTime);\r\n      console.log(time, \"time\");\r\n    } else {\r\n      // 4.2 내가 입력한 값이 음수일 경우\r\n      const setminusTime = new Date(`1970/01/01/UTC${s_Time}`);\r\n      const setDatatime = new Date(`1970/01/01/UTC${dataTime}`);\r\n      const minusTime = setDatatime.getTime() - setminusTime.getTime();\r\n      if (minusTime < 0) {\r\n        const init = 0;\r\n        time = changeTOstring(init);\r\n      } else {\r\n        time = changeTOstring(minusTime);\r\n      }\r\n    }\r\n\r\n    // 조건\r\n    if (name === \"startBtn\") {\r\n      paragraphs[index].start = time;\r\n    } else if (name === \"endBtn\") {\r\n      paragraphs[index].end = time;\r\n    }\r\n    // 5.업데이트\r\n    setSinkes({ ...sinkes, paragraphs });\r\n  };\r\n\r\n  // Yotubed의 onReady의 기능을 사용하기 위한 함수\r\n\r\n  const setReady = (e) => {\r\n    setYoutube(e.target);\r\n  };\r\n\r\n  // 시작 하기 (어디서부터 어디까지 까지 적용해야한다.)\r\n  // 반복되는 루프를 돌아야할것  같은데..\r\n  const playBtn = (index) => {\r\n    const playStime = paragraphs[index].start; // String이니까\r\n    // const playEtime = paragraphs[index].end;\r\n    const changeplayStime = new Date(`1970/01/01/UTC${playStime}`);\r\n    // const changeplayEtime = new Date(`1970/01/01/UTC${playEtime}`);\r\n    const getstartSeconds = changeplayStime / 1000;\r\n    // const getpauseSeconds = changeplayEtime / 1000;\r\n\r\n    youtube.seekTo(getstartSeconds);\r\n  };\r\n\r\n  //  중단하기\r\n  const pauseBtn = () => {\r\n    youtube.pauseVideo();\r\n  };\r\n\r\n  // 잇고 끝기\r\n  const sliceOfTime = (index) => {\r\n    const videoTime = youtube.playerInfo.currentTime;\r\n\r\n    const fixedTime = parseFloat(videoTime).toFixed(3);\r\n    // getTime 초로 나오니까\r\n\r\n    console.log(fixedTime);\r\n    // 이것을 밀리세컨즈로 바꿔준다음에\r\n    const getMil = parseInt(videoTime * 1000);\r\n\r\n    // 이것을 가지고 chageToString에 넣어주는 리턴값을 넣어주면 된다.\r\n    const stringTime = changeTOstring(getMil);\r\n\r\n    console.log(stringTime, \"StringTime\");\r\n\r\n    paragraphs[index].end = stringTime;\r\n    paragraphs[index + 1].start = stringTime;\r\n\r\n    setSinkes({ ...sinkes, paragraphs });\r\n  };\r\n\r\n  // 이전\r\n  const prevBtn = () => {\r\n    history.goBack(-2);\r\n  };\r\n\r\n  // 저장하고 다음으로\r\n\r\n  const saveAndpostApi = async () => {\r\n    await axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/create/sync\",\r\n        {\r\n          contents,\r\n          sentences: paragraphs,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        const {\r\n          data: { data },\r\n        } = res;\r\n\r\n        console.log(data.contents);\r\n        console.log(data.paragraphs);\r\n\r\n        history.push({\r\n          pathname: \"/admin/Edit/mediatool_manage\",\r\n          state: {\r\n            contents: data.contents,\r\n            paragraphs: data.paragraphs,\r\n            page: 4,\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SinkView\r\n        url={url}\r\n        paragraphs={paragraphs}\r\n        inputValue={inputValue}\r\n        inputBtn={inputBtn}\r\n        times={times}\r\n        playBtn={playBtn}\r\n        pauseBtn={pauseBtn}\r\n        setReady={setReady}\r\n        sliceOfTime={sliceOfTime}\r\n        prevBtn={prevBtn}\r\n        saveAndpostApi={saveAndpostApi}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SinkMake;\r\n","C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\WordMake.js",["330"],"C:\\sizl_onhour\\onhour\\src\\routers\\admin\\Edit\\Make\\ProblemMake.js",["331"],"import React, { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport ProblemView from \"../../../../components/ProblemView\";\r\n\r\nlet num = 0;\r\nfunction ProblemMake({ history, contents }) {\r\n  const init = {\r\n    title: \"\",\r\n    questionText: \"\",\r\n    questionImg: null,\r\n    commentaryText: \"\",\r\n    commentaryImg: null,\r\n\r\n    answers: [\r\n      {\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n      {\r\n        answer: \"\",\r\n        correct: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // 공통 : 화면은 임시의 데이터로 뿌려준다.\r\n\r\n  //1. 데이터가 없을시 , 초기 데이터를 뿌려준다.(v)\r\n\r\n  //2. 데이터가 있을시 , 데이터 만큼 임시의 데이터에 뿌려주고, 실질 데이터에도 뿌려준다. (v)\r\n\r\n  //3. 데이터 수정시 , 임의의 데이터도 수정되어야 하고 문제열 추가하기를 누를때 실질 데이터에 추가 되어야한다.\r\n\r\n  //4. 새로운 문제 추가시 임의의 데이터에만 초기값 데이터가 추가된다.\r\n\r\n  //5. 문제열 추가시 실질 데이터에 추가된 데이터가 추가된다.\r\n\r\n  //6. 클릭시 해당 데이터가 보이는것은 임의의 데이터가 보여져야 한다. 그 이유는 화면에 보여지는게 임의의 데이터이기 때문이다.\r\n\r\n  //7. 삭제시 , 실질데이터도 삭제되고 , 임의의 데이터도 삭제되어야하며 보여주는 화면은 임의의 데이터의 마지막 화면이어야한다.\r\n\r\n  const [problem, setProblem] = useState({\r\n    questions: [init],\r\n    subquestions: [],\r\n  });\r\n\r\n  const { questions, subquestions } = problem;\r\n\r\n  console.log(questions);\r\n\r\n  const questionfile = useRef();\r\n  const commentaryfile = useRef();\r\n\r\n  //param = [{},{},{}]\r\n  // 배열도 객체(object)\r\n  // 배열의 DeepCopy 하는법(재귀함수이용)\r\n  // 그런데 이렇게 deepCopy를 하면 성능에 있어 안좋다고 하니까. 새로운 DeepCopy방법을 찾아보자\r\n  const deepCopy = (params) => {\r\n    return JSON.parse(JSON.stringify(params));\r\n  };\r\n\r\n  // 입력시 임의의 데이터에만 들어감\r\n  const inputValue = (e, highindex) => {\r\n    const textValue = e.target.value;\r\n    const textName = e.target.name;\r\n\r\n    // 왜 Switch문이 적용되기 전에 이미 questions 가 바뀌는 것일까?\r\n    // console.log()가 큐에 쌓이기 때문에 최종적으로 배열/객체의 가장 최근 값을 출력한다.\r\n    // 따라서 이미 적용된 상태에서 출력 되는거임\r\n\r\n    // **객체 복사무조건 해줘야지 !!**\r\n    // 공식 react 자료에 직접적으로 객체를 바꾸는 건 좋지 않다고 함\r\n\r\n    const copy_questions = deepCopy(questions);\r\n\r\n    switch (textName) {\r\n      case \"matter\":\r\n        copy_questions[highindex].title = textValue;\r\n        break;\r\n      case \"text_sentence\":\r\n        copy_questions[highindex].questionText = textValue;\r\n        break;\r\n      case \"commentary\":\r\n        copy_questions[highindex].commentaryText = textValue;\r\n        break;\r\n    }\r\n\r\n    setProblem({\r\n      ...problem,\r\n      questions: copy_questions,\r\n    });\r\n  };\r\n  // 입력시 임의의 데이터에만 들어감\r\n  const inputAnswer = (e, highindex, index) => {\r\n    const answerValue = e.target.value;\r\n\r\n    const copy_questions = deepCopy(questions);\r\n\r\n    copy_questions[highindex].answers[index].answer = answerValue;\r\n\r\n    setProblem({ ...problem, questions: copy_questions });\r\n  };\r\n\r\n  // 입력시 임의의 데이터에만 들어감\r\n  // 나중에 5개중에 하나만 클릭되어야함\r\n  // answer 중에 하나가 true일 경우 나머지는 false로 처리해야함\r\n  // 굳이 여기서 또 redering을 할 필요가 없는데 해주네..\r\n  // 그냥 눌렀을때 기고 아니고만 바꿔주면 될듯함\r\n  const checkBtn = (e, highindex, index) => {\r\n    // 내가 클릭한것을 제외한 나머지는 flase 처리해야함\r\n\r\n    const copy_getquestions = deepCopy(questions);\r\n    console.log(copy_getquestions);\r\n    console.log(highindex, \"h\");\r\n    console.log(index, \"i\");\r\n\r\n    for (let i = 0; i < 5; i++) {\r\n      copy_getquestions[highindex].answers[i].correct = false;\r\n    }\r\n\r\n    copy_getquestions[highindex].answers[index].correct = true;\r\n\r\n    setProblem({ ...problem, questions: copy_getquestions });\r\n  };\r\n\r\n  const questionBtn = () => {\r\n    questionfile.current.click();\r\n  };\r\n\r\n  const updateQuestion = (e, highindex) => {\r\n    let formData = new FormData();\r\n    const file = e.target.files[0];\r\n\r\n    formData.append(\"file\", file);\r\n\r\n    axios\r\n      .post(\"https://1hour.school/api/v1/file/upload\", formData, {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      })\r\n      .then((res) => {\r\n        const {\r\n          data: { data },\r\n        } = res;\r\n\r\n        const copy_questions = deepCopy(questions);\r\n\r\n        copy_questions[highindex].questionImg = data.url;\r\n        setProblem({ ...problem, questions: copy_questions });\r\n      });\r\n  };\r\n\r\n  const commantaryBtn = () => {\r\n    commentaryfile.current.click();\r\n  };\r\n\r\n  const updateCommantary = (e, highindex) => {\r\n    let formData = new FormData();\r\n    const file = e.target.files[0];\r\n\r\n    formData.append(\"file\", file);\r\n\r\n    axios\r\n      .post(\"https://1hour.school/api/v1/file/upload\", formData, {\r\n        headers: {\r\n          Authorization: sessionStorage.getItem(\"adminToken\"),\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        const {\r\n          data: { data },\r\n        } = res;\r\n\r\n        const copy_questions = deepCopy(questions);\r\n\r\n        copy_questions[highindex].commentaryImg = data.url;\r\n        setProblem({ ...problem, questions: copy_questions });\r\n      });\r\n  };\r\n\r\n  // 문자열에 추가하기\r\n\r\n  const addPreview = () => {\r\n    let copy_subquestions = deepCopy(subquestions);\r\n\r\n    copy_subquestions = questions;\r\n\r\n    setProblem({ ...problem, subquestions: copy_subquestions });\r\n  };\r\n\r\n  // 새로운 문제 추가하기\r\n\r\n  const addProblem = () => {\r\n    num++;\r\n    console.log(num);\r\n\r\n    const copy_questions = deepCopy(questions);\r\n\r\n    copy_questions.push(init);\r\n\r\n    setProblem({ ...problem, questions: copy_questions });\r\n  };\r\n\r\n  // 문자열 삭제하기\r\n  // 데이터가 아무것도 없을때는 다시 초기값을 넣어준다\r\n  // 데이터가 1개일경우 삭제할때\r\n  const deleteProblem = (index) => {\r\n    console.log(index, \"index\");\r\n    const copy_questions = deepCopy(questions);\r\n    copy_questions.splice(index, 1);\r\n\r\n    if (copy_questions.length === 0) {\r\n      setProblem({\r\n        ...problem,\r\n        questions: [init],\r\n        subquestions: copy_questions,\r\n      });\r\n    } else {\r\n      setProblem({\r\n        ...problem,\r\n        questions: copy_questions,\r\n        subquestions: copy_questions,\r\n      });\r\n    }\r\n  };\r\n\r\n  // 클릭시 문제에 떠야함\r\n  const clickChangeView = (index) => {\r\n    num = index;\r\n    const copy_questions = deepCopy(questions);\r\n    setProblem({ ...problem, questions: copy_questions });\r\n  };\r\n\r\n  // 5.이전으로 가는 함수\r\n  const prevBtn = () => {\r\n    history.goBack(-2);\r\n    // 근데 이렇게 router를 짜도 될까..??\r\n  };\r\n\r\n  // 6.저장후 다음페이지로 이동\r\n\r\n  const saveAndpostApi = async () => {\r\n    await axios\r\n      .post(\r\n        \"https://1hour.school/api/v1/contents/create/question\",\r\n        { contents, questions: subquestions },\r\n        {\r\n          headers: {\r\n            Authorization: sessionStorage.getItem(\"adminToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        history.push(\"/admin/Edit/content_manage\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ProblemView\r\n        questions={questions}\r\n        inputValue={inputValue}\r\n        inputAnswer={inputAnswer}\r\n        checkBtn={checkBtn}\r\n        questionfile={questionfile}\r\n        questionBtn={questionBtn}\r\n        updateQuestion={updateQuestion}\r\n        commentaryfile={commentaryfile}\r\n        commantaryBtn={commantaryBtn}\r\n        updateCommantary={updateCommantary}\r\n        addPreview={addPreview}\r\n        subquestions={subquestions}\r\n        addProblem={addProblem}\r\n        clickChangeView={clickChangeView}\r\n        num={num}\r\n        deleteProblem={deleteProblem}\r\n        prevBtn={prevBtn}\r\n        saveAndpostApi={saveAndpostApi}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProblemMake;\r\n",{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","severity":1,"message":"337","line":7,"column":9,"nodeType":"338","endLine":7,"endColumn":66},{"ruleId":"332","replacedBy":"339"},{"ruleId":"334","replacedBy":"340"},{"ruleId":"336","severity":1,"message":"337","line":55,"column":9,"nodeType":"338","endLine":55,"endColumn":58},{"ruleId":"336","severity":1,"message":"337","line":14,"column":9,"nodeType":"338","endLine":14,"endColumn":60},{"ruleId":"332","replacedBy":"341"},{"ruleId":"334","replacedBy":"342"},{"ruleId":"332","replacedBy":"343"},{"ruleId":"334","replacedBy":"344"},{"ruleId":"345","severity":1,"message":"346","line":16,"column":18,"nodeType":"347","endLine":30,"endColumn":4},{"ruleId":"345","severity":1,"message":"348","line":32,"column":21,"nodeType":"349","endLine":32,"endColumn":23,"suggestions":"350"},{"ruleId":"345","severity":1,"message":"346","line":16,"column":18,"nodeType":"347","endLine":33,"endColumn":4},{"ruleId":"345","severity":1,"message":"351","line":35,"column":21,"nodeType":"349","endLine":35,"endColumn":23,"suggestions":"352"},{"ruleId":"332","replacedBy":"353"},{"ruleId":"334","replacedBy":"354"},{"ruleId":"345","severity":1,"message":"346","line":49,"column":18,"nodeType":"347","endLine":72,"endColumn":4},{"ruleId":"345","severity":1,"message":"355","line":74,"column":21,"nodeType":"349","endLine":74,"endColumn":37,"suggestions":"356"},{"ruleId":"345","severity":1,"message":"346","line":12,"column":18,"nodeType":"347","endLine":22,"endColumn":4},{"ruleId":"332","replacedBy":"357"},{"ruleId":"334","replacedBy":"358"},{"ruleId":"332","replacedBy":"359"},{"ruleId":"334","replacedBy":"360"},{"ruleId":"332","replacedBy":"361"},{"ruleId":"334","replacedBy":"362"},{"ruleId":"363","severity":1,"message":"364","line":13,"column":17,"nodeType":"365","messageId":"366","endLine":13,"endColumn":22},{"ruleId":"345","severity":1,"message":"346","line":15,"column":18,"nodeType":"347","endLine":26,"endColumn":4},{"ruleId":"345","severity":1,"message":"367","line":28,"column":21,"nodeType":"349","endLine":28,"endColumn":23,"suggestions":"368"},{"ruleId":"345","severity":1,"message":"346","line":29,"column":19,"nodeType":"347","endLine":41,"endColumn":4},{"ruleId":"332","replacedBy":"369"},{"ruleId":"334","replacedBy":"370"},{"ruleId":"363","severity":1,"message":"371","line":28,"column":10,"nodeType":"365","messageId":"366","endLine":28,"endColumn":14},{"ruleId":"345","severity":1,"message":"346","line":46,"column":18,"nodeType":"347","endLine":63,"endColumn":4},{"ruleId":"372","severity":1,"message":"373","line":77,"column":13,"nodeType":"374","messageId":"375","endLine":77,"endColumn":15},{"ruleId":"372","severity":1,"message":"373","line":79,"column":20,"nodeType":"374","messageId":"375","endLine":79,"endColumn":22},{"ruleId":"376","severity":1,"message":"377","line":160,"column":60,"nodeType":"347","messageId":"378","endLine":160,"endColumn":62},{"ruleId":"345","severity":1,"message":"379","line":204,"column":21,"nodeType":"349","endLine":204,"endColumn":23,"suggestions":"380"},{"ruleId":"345","severity":1,"message":"346","line":67,"column":18,"nodeType":"347","endLine":90,"endColumn":4},{"ruleId":"345","severity":1,"message":"381","line":91,"column":21,"nodeType":"349","endLine":91,"endColumn":23,"suggestions":"382"},{"ruleId":"363","severity":1,"message":"383","line":2,"column":38,"nodeType":"365","messageId":"366","endLine":2,"endColumn":45},{"ruleId":"345","severity":1,"message":"346","line":21,"column":18,"nodeType":"347","endLine":48,"endColumn":4},{"ruleId":"345","severity":1,"message":"384","line":234,"column":21,"nodeType":"349","endLine":234,"endColumn":23,"suggestions":"385"},{"ruleId":"336","severity":1,"message":"337","line":58,"column":17,"nodeType":"338","endLine":58,"endColumn":22},{"ruleId":"336","severity":1,"message":"337","line":68,"column":17,"nodeType":"338","endLine":68,"endColumn":22},{"ruleId":"336","severity":1,"message":"337","line":78,"column":17,"nodeType":"338","endLine":78,"endColumn":22},{"ruleId":"336","severity":1,"message":"337","line":84,"column":17,"nodeType":"338","endLine":84,"endColumn":22},{"ruleId":"336","severity":1,"message":"337","line":94,"column":17,"nodeType":"338","endLine":94,"endColumn":22},{"ruleId":"363","severity":1,"message":"386","line":1,"column":17,"nodeType":"365","messageId":"366","endLine":1,"endColumn":26},{"ruleId":"363","severity":1,"message":"387","line":1,"column":28,"nodeType":"365","messageId":"366","endLine":1,"endColumn":36},{"ruleId":"388","severity":1,"message":"389","line":58,"column":47,"nodeType":"365","messageId":"390","endLine":58,"endColumn":52},{"ruleId":"336","severity":1,"message":"337","line":61,"column":13,"nodeType":"338","endLine":65,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":67,"column":13,"nodeType":"338","endLine":71,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":74,"column":13,"nodeType":"338","endLine":78,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":80,"column":13,"nodeType":"338","endLine":84,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":89,"column":13,"nodeType":"338","endLine":89,"endColumn":66},{"ruleId":"336","severity":1,"message":"337","line":97,"column":13,"nodeType":"338","endLine":97,"endColumn":55},{"ruleId":"336","severity":1,"message":"337","line":102,"column":13,"nodeType":"338","endLine":106,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":108,"column":13,"nodeType":"338","endLine":112,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":115,"column":13,"nodeType":"338","endLine":119,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":121,"column":13,"nodeType":"338","endLine":125,"endColumn":15},{"ruleId":"345","severity":1,"message":"346","line":12,"column":18,"nodeType":"347","endLine":27,"endColumn":4},{"ruleId":"376","severity":1,"message":"377","line":96,"column":60,"nodeType":"347","messageId":"378","endLine":96,"endColumn":62},{"ruleId":"345","severity":1,"message":"391","line":141,"column":21,"nodeType":"349","endLine":141,"endColumn":23,"suggestions":"392"},{"ruleId":"388","severity":1,"message":"389","line":28,"column":47,"nodeType":"365","messageId":"390","endLine":28,"endColumn":52},{"ruleId":"388","severity":1,"message":"389","line":40,"column":47,"nodeType":"365","messageId":"390","endLine":40,"endColumn":52},{"ruleId":"336","severity":1,"message":"337","line":50,"column":17,"nodeType":"338","endLine":50,"endColumn":72},{"ruleId":"393","severity":1,"message":"394","line":141,"column":5,"nodeType":"395","messageId":"396","endLine":151,"endColumn":6},{"ruleId":"345","severity":1,"message":"397","line":304,"column":6,"nodeType":"349","endLine":304,"endColumn":8,"suggestions":"398"},{"ruleId":"336","severity":1,"message":"337","line":50,"column":13,"nodeType":"338","endLine":50,"endColumn":63},{"ruleId":"336","severity":1,"message":"337","line":57,"column":13,"nodeType":"338","endLine":57,"endColumn":57},{"ruleId":"336","severity":1,"message":"337","line":64,"column":13,"nodeType":"338","endLine":64,"endColumn":60},{"ruleId":"388","severity":1,"message":"389","line":86,"column":41,"nodeType":"365","messageId":"390","endLine":86,"endColumn":46},{"ruleId":"336","severity":1,"message":"337","line":90,"column":17,"nodeType":"338","endLine":93,"endColumn":18},{"ruleId":"336","severity":1,"message":"337","line":33,"column":9,"nodeType":"338","endLine":37,"endColumn":10},{"ruleId":"336","severity":1,"message":"337","line":43,"column":13,"nodeType":"338","endLine":46,"endColumn":14},{"ruleId":"336","severity":1,"message":"337","line":57,"column":13,"nodeType":"338","endLine":61,"endColumn":14},{"ruleId":"388","severity":1,"message":"389","line":74,"column":49,"nodeType":"365","messageId":"390","endLine":74,"endColumn":54},{"ruleId":"336","severity":1,"message":"337","line":80,"column":15,"nodeType":"338","endLine":84,"endColumn":16},{"ruleId":"336","severity":1,"message":"337","line":86,"column":15,"nodeType":"338","endLine":90,"endColumn":16},{"ruleId":"336","severity":1,"message":"337","line":101,"column":13,"nodeType":"338","endLine":101,"endColumn":64},{"ruleId":"336","severity":1,"message":"337","line":108,"column":13,"nodeType":"338","endLine":111,"endColumn":14},{"ruleId":"336","severity":1,"message":"337","line":122,"column":13,"nodeType":"338","endLine":126,"endColumn":14},{"ruleId":"363","severity":1,"message":"386","line":1,"column":17,"nodeType":"365","messageId":"366","endLine":1,"endColumn":26},{"ruleId":"372","severity":1,"message":"373","line":26,"column":13,"nodeType":"374","messageId":"375","endLine":26,"endColumn":15},{"ruleId":"372","severity":1,"message":"373","line":28,"column":20,"nodeType":"374","messageId":"375","endLine":28,"endColumn":22},{"ruleId":"376","severity":1,"message":"377","line":109,"column":60,"nodeType":"347","messageId":"378","endLine":109,"endColumn":62},{"ruleId":"363","severity":1,"message":"386","line":1,"column":27,"nodeType":"365","messageId":"366","endLine":1,"endColumn":36},{"ruleId":"376","severity":1,"message":"377","line":78,"column":60,"nodeType":"347","messageId":"378","endLine":78,"endColumn":62},{"ruleId":"393","severity":1,"message":"394","line":88,"column":5,"nodeType":"395","messageId":"396","endLine":98,"endColumn":6},"no-native-reassign",["399"],"no-negated-in-lhs",["400"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["399"],["400"],["399"],["400"],["399"],["400"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'page' and 'playlists'. Either include them or remove the dependency array. You can also do a functional update 'setPlaylists(p => ...)' if you only need 'playlists' in the 'setPlaylists' call.","ArrayExpression",["401"],"React Hook useEffect has missing dependencies: 'members', 'page', and 'tab'. Either include them or remove the dependency array. You can also do a functional update 'setMembers(m => ...)' if you only need 'members' in the 'setMembers' call.",["402"],["399"],["400"],"React Hook useEffect has a missing dependency: 'contents'. Either include it or remove the dependency array. You can also do a functional update 'setContents(c => ...)' if you only need 'contents' in the 'setContents' call.",["403"],["399"],["400"],["399"],["400"],["399"],["400"],"no-unused-vars","'total' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'banners' and 'page'. Either include them or remove the dependency array. You can also do a functional update 'setBanners(b => ...)' if you only need 'banners' in the 'setBanners' call.",["404"],["399"],["400"],"'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'contents' and 'modifies_two'. Either include them or remove the dependency array. You can also do a functional update 'setModifies_two(m => ...)' if you only need 'modifies_two' in the 'setModifies_two' call.",["405"],"React Hook useEffect has missing dependencies: 'contents' and 'modifies'. Either include them or remove the dependency array. You can also do a functional update 'setModifies(m => ...)' if you only need 'modifies' in the 'setModifies' call.",["406"],"'version' is defined but never used.","React Hook useEffect has missing dependencies: 'contents' and 'sinkes'. Either include them or remove the dependency array. You can also do a functional update 'setSinkes(s => ...)' if you only need 'sinkes' in the 'setSinkes' call.",["407"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-use-before-define","'index' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'contents' and 'words'. Either include them or remove the dependency array. You can also do a functional update 'setWords(w => ...)' if you only need 'words' in the 'setWords' call.",["408"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'getApi'. Either include it or remove the dependency array.",["409"],"no-global-assign","no-unsafe-negation",{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},"Update the dependencies array to be: [page, playlists]",{"range":"428","text":"429"},"Update the dependencies array to be: [members, page, tab]",{"range":"430","text":"431"},"Update the dependencies array to be: [page, category, contents]",{"range":"432","text":"433"},"Update the dependencies array to be: [banners, page]",{"range":"434","text":"435"},"Update the dependencies array to be: [contents, modifies_two]",{"range":"436","text":"437"},"Update the dependencies array to be: [contents, modifies]",{"range":"438","text":"439"},"Update the dependencies array to be: [contents, sinkes]",{"range":"440","text":"441"},"Update the dependencies array to be: [contents, words]",{"range":"442","text":"443"},"Update the dependencies array to be: [getApi]",{"range":"444","text":"445"},[811,813],"[page, playlists]",[877,879],"[members, page, tab]",[2344,2360],"[page, category, contents]",[707,709],"[banners, page]",[5720,5722],"[contents, modifies_two]",[2446,2448],"[contents, modifies]",[6656,6658],"[contents, sinkes]",[3321,3323],"[contents, words]",[7477,7479],"[getApi]"]